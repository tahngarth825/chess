exit
@board[7,6]
@board[[7,6]]
@board[7,6]
c
display move
c
move
CASTLING_MOVES.include?(move)
CASTLING_MOVES
old_moved
#old_moved
n
@color
move
@position
n
self.type
self
c
exit
c
exit
piece.valid_moves
piece
n
@last_board
self
c
n
c
exit
@exit
@position
@color
@moved
down
square.type
square
up
movelist
color
@type
up
help
self
c
display @type
@type
c
@type
exit
self[start_pos].type
self
end_pos
start_pos
self[start_pos].type
self[start_pos]
n
end_pos
pos
exit
@moved
@move
exit
c
@color == :black
@color
exit
c
exit
c
square.moved
exit
square.moved
exit
square.moved
square.type
exit
@moved
n
@type == "R "
@type
exit
square.type
square.moved
square
exit
c
square.class
square.type
square
c
square.valid_moves
square.type
square.color
square
c
square.valid_moves
square.color
square.type
exit
c
square.valid_moves
square
exit
square.moves
square.color
square.type
next
square
row
step
s
n
row
n
c
display color
display position
exit
king_position
find_position("Ki", color)
display color
c
n
c
n
exit
c
@board.populate
down
game.play
up
down
up
down
d
catch
help
game.play
game
n
@board
exit
c
help
c
display @type
c
self.type
@type
c
display new_pos
n
new_pos
exit
c
finish
catch
help
run
c
cc
c
step 3
step out
c
display @type
@type
self.type
c
n
self
n
@board
n
display pos
watch pos
n
pos
exit
c
self
@board
self[pos]
pos
quit
c
square.type
square
